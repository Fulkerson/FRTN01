// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "batchtank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace batchtank_messages {

void protobuf_ShutdownFile_batchtank_2eproto() {
  delete BaseMessage::default_instance_;
  delete Register::default_instance_;
  delete ControlSignal::default_instance_;
  delete Sample::default_instance_;
}

void protobuf_AddDesc_batchtank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  BaseMessage::default_instance_ = new BaseMessage();
  Register::default_instance_ = new Register();
  ControlSignal::default_instance_ = new ControlSignal();
  Sample::default_instance_ = new Sample();
  BaseMessage::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  ControlSignal::default_instance_->InitAsDefaultInstance();
  Sample::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_batchtank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_batchtank_2eproto {
  StaticDescriptorInitializer_batchtank_2eproto() {
    protobuf_AddDesc_batchtank_2eproto();
  }
} static_descriptor_initializer_batchtank_2eproto_;

bool Sensor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool Output_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BaseMessage::kSampleFieldNumber;
const int BaseMessage::kSignalFieldNumber;
const int BaseMessage::kRegisterFieldNumber;
const int BaseMessage::kGetSensorFieldNumber;
const int BaseMessage::kGetOutputFieldNumber;
const int BaseMessage::kEndConnectionFieldNumber;
#endif  // !_MSC_VER

BaseMessage::BaseMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BaseMessage::InitAsDefaultInstance() {
  register__ = const_cast< ::batchtank_messages::Register*>(&::batchtank_messages::Register::default_instance());
}

BaseMessage::BaseMessage(const BaseMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BaseMessage::SharedCtor() {
  _cached_size_ = 0;
  register__ = NULL;
  endconnection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseMessage::~BaseMessage() {
  SharedDtor();
}

void BaseMessage::SharedDtor() {
  if (this != default_instance_) {
    delete register__;
  }
}

void BaseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BaseMessage& BaseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_batchtank_2eproto();  return *default_instance_;
}

BaseMessage* BaseMessage::default_instance_ = NULL;

BaseMessage* BaseMessage::New() const {
  return new BaseMessage;
}

void BaseMessage::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_register_()) {
      if (register__ != NULL) register__->::batchtank_messages::Register::Clear();
    }
    endconnection_ = false;
  }
  sample_.Clear();
  signal_.Clear();
  getsensor_.Clear();
  getoutput_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BaseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .batchtank_messages.Sample sample = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sample;
        if (input->ExpectTag(18)) goto parse_signal;
        break;
      }
      
      // repeated .batchtank_messages.ControlSignal signal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signal;
        if (input->ExpectTag(26)) goto parse_register;
        break;
      }
      
      // optional .batchtank_messages.Register register = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getSensor;
        break;
      }
      
      // repeated .batchtank_messages.Sensor getSensor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getSensor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (batchtank_messages::Sensor_IsValid(value)) {
            add_getsensor(static_cast< batchtank_messages::Sensor >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &batchtank_messages::Sensor_IsValid,
                 this->mutable_getsensor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getSensor;
        if (input->ExpectTag(40)) goto parse_getOutput;
        break;
      }
      
      // repeated .batchtank_messages.Output getOutput = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getOutput:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (batchtank_messages::Output_IsValid(value)) {
            add_getoutput(static_cast< batchtank_messages::Output >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &batchtank_messages::Output_IsValid,
                 this->mutable_getoutput())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getOutput;
        if (input->ExpectTag(48)) goto parse_endConnection;
        break;
      }
      
      // optional bool endConnection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endConnection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endconnection_)));
          set_has_endconnection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .batchtank_messages.Sample sample = 1;
  for (int i = 0; i < this->sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sample(i), output);
  }
  
  // repeated .batchtank_messages.ControlSignal signal = 2;
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->signal(i), output);
  }
  
  // optional .batchtank_messages.Register register = 3;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->register_(), output);
  }
  
  // repeated .batchtank_messages.Sensor getSensor = 4;
  for (int i = 0; i < this->getsensor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->getsensor(i), output);
  }
  
  // repeated .batchtank_messages.Output getOutput = 5;
  for (int i = 0; i < this->getoutput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->getoutput(i), output);
  }
  
  // optional bool endConnection = 6;
  if (has_endconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->endconnection(), output);
  }
  
}

int BaseMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .batchtank_messages.Register register = 3;
    if (has_register_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_());
    }
    
    // optional bool endConnection = 6;
    if (has_endconnection()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .batchtank_messages.Sample sample = 1;
  total_size += 1 * this->sample_size();
  for (int i = 0; i < this->sample_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sample(i));
  }
  
  // repeated .batchtank_messages.ControlSignal signal = 2;
  total_size += 1 * this->signal_size();
  for (int i = 0; i < this->signal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signal(i));
  }
  
  // repeated .batchtank_messages.Sensor getSensor = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->getsensor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->getsensor(i));
    }
    total_size += 1 * this->getsensor_size() + data_size;
  }
  
  // repeated .batchtank_messages.Output getOutput = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->getoutput_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->getoutput(i));
    }
    total_size += 1 * this->getoutput_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BaseMessage*>(&from));
}

void BaseMessage::MergeFrom(const BaseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sample_.MergeFrom(from.sample_);
  signal_.MergeFrom(from.signal_);
  getsensor_.MergeFrom(from.getsensor_);
  getoutput_.MergeFrom(from.getoutput_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_register_()) {
      mutable_register_()->::batchtank_messages::Register::MergeFrom(from.register_());
    }
    if (from.has_endconnection()) {
      set_endconnection(from.endconnection());
    }
  }
}

void BaseMessage::CopyFrom(const BaseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMessage::IsInitialized() const {
  
  for (int i = 0; i < sample_size(); i++) {
    if (!this->sample(i).IsInitialized()) return false;
  }
  for (int i = 0; i < signal_size(); i++) {
    if (!this->signal(i).IsInitialized()) return false;
  }
  if (has_register_()) {
    if (!this->register_().IsInitialized()) return false;
  }
  return true;
}

void BaseMessage::Swap(BaseMessage* other) {
  if (other != this) {
    sample_.Swap(&other->sample_);
    signal_.Swap(&other->signal_);
    std::swap(register__, other->register__);
    getsensor_.Swap(&other->getsensor_);
    getoutput_.Swap(&other->getoutput_);
    std::swap(endconnection_, other->endconnection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BaseMessage::GetTypeName() const {
  return "batchtank_messages.BaseMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kTypeFieldNumber;
const int Register::kPeriodTimeFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  periodtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_batchtank_2eproto();  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    periodtime_ = GOOGLE_ULONGLONG(0);
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .batchtank_messages.Sensor type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (batchtank_messages::Sensor_IsValid(value)) {
            add_type(static_cast< batchtank_messages::Sensor >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &batchtank_messages::Sensor_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(16)) goto parse_periodTime;
        break;
      }
      
      // required uint64 periodTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_periodTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &periodtime_)));
          set_has_periodtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .batchtank_messages.Sensor type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(i), output);
  }
  
  // required uint64 periodTime = 2;
  if (has_periodtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->periodtime(), output);
  }
  
}

int Register::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 periodTime = 2;
    if (has_periodtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->periodtime());
    }
    
  }
  // repeated .batchtank_messages.Sensor type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Register*>(&from));
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_periodtime()) {
      set_periodtime(from.periodtime());
    }
  }
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    std::swap(periodtime_, other->periodtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Register::GetTypeName() const {
  return "batchtank_messages.Register";
}


// ===================================================================

#ifndef _MSC_VER
const int ControlSignal::kValueFieldNumber;
const int ControlSignal::kRefFieldNumber;
const int ControlSignal::kTypeFieldNumber;
#endif  // !_MSC_VER

ControlSignal::ControlSignal()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ControlSignal::InitAsDefaultInstance() {
}

ControlSignal::ControlSignal(const ControlSignal& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ControlSignal::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ref_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlSignal::~ControlSignal() {
  SharedDtor();
}

void ControlSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ControlSignal& ControlSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_batchtank_2eproto();  return *default_instance_;
}

ControlSignal* ControlSignal::default_instance_ = NULL;

ControlSignal* ControlSignal::New() const {
  return new ControlSignal;
}

void ControlSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    ref_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ControlSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ref;
        break;
      }
      
      // required int32 ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .batchtank_messages.Output type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (batchtank_messages::Output_IsValid(value)) {
            set_type(static_cast< batchtank_messages::Output >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // required int32 ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref(), output);
  }
  
  // required .batchtank_messages.Output type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
}

int ControlSignal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // required int32 ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }
    
    // required .batchtank_messages.Output type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlSignal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ControlSignal*>(&from));
}

void ControlSignal::MergeFrom(const ControlSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ControlSignal::CopyFrom(const ControlSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ControlSignal::Swap(ControlSignal* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(ref_, other->ref_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ControlSignal::GetTypeName() const {
  return "batchtank_messages.ControlSignal";
}


// ===================================================================

#ifndef _MSC_VER
const int Sample::kValueFieldNumber;
const int Sample::kTypeFieldNumber;
#endif  // !_MSC_VER

Sample::Sample()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Sample::InitAsDefaultInstance() {
}

Sample::Sample(const Sample& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample::~Sample() {
  SharedDtor();
}

void Sample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sample& Sample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_batchtank_2eproto();  return *default_instance_;
}

Sample* Sample::default_instance_ = NULL;

Sample* Sample::New() const {
  return new Sample;
}

void Sample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .batchtank_messages.Sensor type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (batchtank_messages::Sensor_IsValid(value)) {
            set_type(static_cast< batchtank_messages::Sensor >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // required .batchtank_messages.Sensor type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
}

int Sample::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // required .batchtank_messages.Sensor type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sample*>(&from));
}

void Sample::MergeFrom(const Sample& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void Sample::CopyFrom(const Sample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Sample::Swap(Sample* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Sample::GetTypeName() const {
  return "batchtank_messages.Sample";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace batchtank_messages

// @@protoc_insertion_point(global_scope)
