// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batchtank.proto

#ifndef PROTOBUF_batchtank_2eproto__INCLUDED
#define PROTOBUF_batchtank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace batchtank_messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_batchtank_2eproto();
void protobuf_AssignDesc_batchtank_2eproto();
void protobuf_ShutdownFile_batchtank_2eproto();

class BaseMessage;
class Register;
class ControlSignal;
class Sample;

enum Sensor {
  TEMP = 0,
  LEVEL = 1,
  IN_PUMP_RATE = 2,
  OUT_PUMP_RATE = 3,
  HEATER_RATE = 4,
  MIXER_RATE = 5,
  COOLER_RATE = 6
};
bool Sensor_IsValid(int value);
const Sensor Sensor_MIN = TEMP;
const Sensor Sensor_MAX = COOLER_RATE;
const int Sensor_ARRAYSIZE = Sensor_MAX + 1;

enum Output {
  HEATER = 0,
  COOLER = 1,
  IN_PUMP = 2,
  OUT_PUMP = 3,
  MIXER = 4
};
bool Output_IsValid(int value);
const Output Output_MIN = HEATER;
const Output Output_MAX = MIXER;
const int Output_ARRAYSIZE = Output_MAX + 1;

// ===================================================================

class BaseMessage : public ::google::protobuf::MessageLite {
 public:
  BaseMessage();
  virtual ~BaseMessage();
  
  BaseMessage(const BaseMessage& from);
  
  inline BaseMessage& operator=(const BaseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BaseMessage& default_instance();
  
  void Swap(BaseMessage* other);
  
  // implements Message ----------------------------------------------
  
  BaseMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BaseMessage& from);
  void MergeFrom(const BaseMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .batchtank_messages.Sample sample = 1;
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 1;
  inline const ::batchtank_messages::Sample& sample(int index) const;
  inline ::batchtank_messages::Sample* mutable_sample(int index);
  inline ::batchtank_messages::Sample* add_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::batchtank_messages::Sample >&
      sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::batchtank_messages::Sample >*
      mutable_sample();
  
  // repeated .batchtank_messages.ControlSignal signal = 2;
  inline int signal_size() const;
  inline void clear_signal();
  static const int kSignalFieldNumber = 2;
  inline const ::batchtank_messages::ControlSignal& signal(int index) const;
  inline ::batchtank_messages::ControlSignal* mutable_signal(int index);
  inline ::batchtank_messages::ControlSignal* add_signal();
  inline const ::google::protobuf::RepeatedPtrField< ::batchtank_messages::ControlSignal >&
      signal() const;
  inline ::google::protobuf::RepeatedPtrField< ::batchtank_messages::ControlSignal >*
      mutable_signal();
  
  // optional .batchtank_messages.Register register = 3;
  inline bool has_register_() const;
  inline void clear_register_();
  static const int kRegisterFieldNumber = 3;
  inline const ::batchtank_messages::Register& register_() const;
  inline ::batchtank_messages::Register* mutable_register_();
  inline ::batchtank_messages::Register* release_register_();
  
  // repeated .batchtank_messages.Sensor getSensor = 4;
  inline int getsensor_size() const;
  inline void clear_getsensor();
  static const int kGetSensorFieldNumber = 4;
  inline batchtank_messages::Sensor getsensor(int index) const;
  inline void set_getsensor(int index, batchtank_messages::Sensor value);
  inline void add_getsensor(batchtank_messages::Sensor value);
  inline const ::google::protobuf::RepeatedField<int>& getsensor() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_getsensor();
  
  // repeated .batchtank_messages.Output getOutput = 5;
  inline int getoutput_size() const;
  inline void clear_getoutput();
  static const int kGetOutputFieldNumber = 5;
  inline batchtank_messages::Output getoutput(int index) const;
  inline void set_getoutput(int index, batchtank_messages::Output value);
  inline void add_getoutput(batchtank_messages::Output value);
  inline const ::google::protobuf::RepeatedField<int>& getoutput() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_getoutput();
  
  // optional bool endConnection = 6;
  inline bool has_endconnection() const;
  inline void clear_endconnection();
  static const int kEndConnectionFieldNumber = 6;
  inline bool endconnection() const;
  inline void set_endconnection(bool value);
  
  // @@protoc_insertion_point(class_scope:batchtank_messages.BaseMessage)
 private:
  inline void set_has_register_();
  inline void clear_has_register_();
  inline void set_has_endconnection();
  inline void clear_has_endconnection();
  
  ::google::protobuf::RepeatedPtrField< ::batchtank_messages::Sample > sample_;
  ::google::protobuf::RepeatedPtrField< ::batchtank_messages::ControlSignal > signal_;
  ::batchtank_messages::Register* register__;
  ::google::protobuf::RepeatedField<int> getsensor_;
  ::google::protobuf::RepeatedField<int> getoutput_;
  bool endconnection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_batchtank_2eproto();
  friend void protobuf_AssignDesc_batchtank_2eproto();
  friend void protobuf_ShutdownFile_batchtank_2eproto();
  
  void InitAsDefaultInstance();
  static BaseMessage* default_instance_;
};
// -------------------------------------------------------------------

class Register : public ::google::protobuf::MessageLite {
 public:
  Register();
  virtual ~Register();
  
  Register(const Register& from);
  
  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Register& default_instance();
  
  void Swap(Register* other);
  
  // implements Message ----------------------------------------------
  
  Register* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .batchtank_messages.Sensor type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline batchtank_messages::Sensor type(int index) const;
  inline void set_type(int index, batchtank_messages::Sensor value);
  inline void add_type(batchtank_messages::Sensor value);
  inline const ::google::protobuf::RepeatedField<int>& type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_type();
  
  // required uint64 periodTime = 2;
  inline bool has_periodtime() const;
  inline void clear_periodtime();
  static const int kPeriodTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 periodtime() const;
  inline void set_periodtime(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:batchtank_messages.Register)
 private:
  inline void set_has_periodtime();
  inline void clear_has_periodtime();
  
  ::google::protobuf::RepeatedField<int> type_;
  ::google::protobuf::uint64 periodtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_batchtank_2eproto();
  friend void protobuf_AssignDesc_batchtank_2eproto();
  friend void protobuf_ShutdownFile_batchtank_2eproto();
  
  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class ControlSignal : public ::google::protobuf::MessageLite {
 public:
  ControlSignal();
  virtual ~ControlSignal();
  
  ControlSignal(const ControlSignal& from);
  
  inline ControlSignal& operator=(const ControlSignal& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ControlSignal& default_instance();
  
  void Swap(ControlSignal* other);
  
  // implements Message ----------------------------------------------
  
  ControlSignal* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ControlSignal& from);
  void MergeFrom(const ControlSignal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // required int32 ref = 2;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 2;
  inline ::google::protobuf::int32 ref() const;
  inline void set_ref(::google::protobuf::int32 value);
  
  // required .batchtank_messages.Output type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline batchtank_messages::Output type() const;
  inline void set_type(batchtank_messages::Output value);
  
  // @@protoc_insertion_point(class_scope:batchtank_messages.ControlSignal)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 ref_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_batchtank_2eproto();
  friend void protobuf_AssignDesc_batchtank_2eproto();
  friend void protobuf_ShutdownFile_batchtank_2eproto();
  
  void InitAsDefaultInstance();
  static ControlSignal* default_instance_;
};
// -------------------------------------------------------------------

class Sample : public ::google::protobuf::MessageLite {
 public:
  Sample();
  virtual ~Sample();
  
  Sample(const Sample& from);
  
  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Sample& default_instance();
  
  void Swap(Sample* other);
  
  // implements Message ----------------------------------------------
  
  Sample* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // required .batchtank_messages.Sensor type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline batchtank_messages::Sensor type() const;
  inline void set_type(batchtank_messages::Sensor value);
  
  // @@protoc_insertion_point(class_scope:batchtank_messages.Sample)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::int32 value_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_batchtank_2eproto();
  friend void protobuf_AssignDesc_batchtank_2eproto();
  friend void protobuf_ShutdownFile_batchtank_2eproto();
  
  void InitAsDefaultInstance();
  static Sample* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseMessage

// repeated .batchtank_messages.Sample sample = 1;
inline int BaseMessage::sample_size() const {
  return sample_.size();
}
inline void BaseMessage::clear_sample() {
  sample_.Clear();
}
inline const ::batchtank_messages::Sample& BaseMessage::sample(int index) const {
  return sample_.Get(index);
}
inline ::batchtank_messages::Sample* BaseMessage::mutable_sample(int index) {
  return sample_.Mutable(index);
}
inline ::batchtank_messages::Sample* BaseMessage::add_sample() {
  return sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::batchtank_messages::Sample >&
BaseMessage::sample() const {
  return sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::batchtank_messages::Sample >*
BaseMessage::mutable_sample() {
  return &sample_;
}

// repeated .batchtank_messages.ControlSignal signal = 2;
inline int BaseMessage::signal_size() const {
  return signal_.size();
}
inline void BaseMessage::clear_signal() {
  signal_.Clear();
}
inline const ::batchtank_messages::ControlSignal& BaseMessage::signal(int index) const {
  return signal_.Get(index);
}
inline ::batchtank_messages::ControlSignal* BaseMessage::mutable_signal(int index) {
  return signal_.Mutable(index);
}
inline ::batchtank_messages::ControlSignal* BaseMessage::add_signal() {
  return signal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::batchtank_messages::ControlSignal >&
BaseMessage::signal() const {
  return signal_;
}
inline ::google::protobuf::RepeatedPtrField< ::batchtank_messages::ControlSignal >*
BaseMessage::mutable_signal() {
  return &signal_;
}

// optional .batchtank_messages.Register register = 3;
inline bool BaseMessage::has_register_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseMessage::set_has_register_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseMessage::clear_has_register_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseMessage::clear_register_() {
  if (register__ != NULL) register__->::batchtank_messages::Register::Clear();
  clear_has_register_();
}
inline const ::batchtank_messages::Register& BaseMessage::register_() const {
  return register__ != NULL ? *register__ : *default_instance_->register__;
}
inline ::batchtank_messages::Register* BaseMessage::mutable_register_() {
  set_has_register_();
  if (register__ == NULL) register__ = new ::batchtank_messages::Register;
  return register__;
}
inline ::batchtank_messages::Register* BaseMessage::release_register_() {
  clear_has_register_();
  ::batchtank_messages::Register* temp = register__;
  register__ = NULL;
  return temp;
}

// repeated .batchtank_messages.Sensor getSensor = 4;
inline int BaseMessage::getsensor_size() const {
  return getsensor_.size();
}
inline void BaseMessage::clear_getsensor() {
  getsensor_.Clear();
}
inline batchtank_messages::Sensor BaseMessage::getsensor(int index) const {
  return static_cast< batchtank_messages::Sensor >(getsensor_.Get(index));
}
inline void BaseMessage::set_getsensor(int index, batchtank_messages::Sensor value) {
  GOOGLE_DCHECK(batchtank_messages::Sensor_IsValid(value));
  getsensor_.Set(index, value);
}
inline void BaseMessage::add_getsensor(batchtank_messages::Sensor value) {
  GOOGLE_DCHECK(batchtank_messages::Sensor_IsValid(value));
  getsensor_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
BaseMessage::getsensor() const {
  return getsensor_;
}
inline ::google::protobuf::RepeatedField<int>*
BaseMessage::mutable_getsensor() {
  return &getsensor_;
}

// repeated .batchtank_messages.Output getOutput = 5;
inline int BaseMessage::getoutput_size() const {
  return getoutput_.size();
}
inline void BaseMessage::clear_getoutput() {
  getoutput_.Clear();
}
inline batchtank_messages::Output BaseMessage::getoutput(int index) const {
  return static_cast< batchtank_messages::Output >(getoutput_.Get(index));
}
inline void BaseMessage::set_getoutput(int index, batchtank_messages::Output value) {
  GOOGLE_DCHECK(batchtank_messages::Output_IsValid(value));
  getoutput_.Set(index, value);
}
inline void BaseMessage::add_getoutput(batchtank_messages::Output value) {
  GOOGLE_DCHECK(batchtank_messages::Output_IsValid(value));
  getoutput_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
BaseMessage::getoutput() const {
  return getoutput_;
}
inline ::google::protobuf::RepeatedField<int>*
BaseMessage::mutable_getoutput() {
  return &getoutput_;
}

// optional bool endConnection = 6;
inline bool BaseMessage::has_endconnection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseMessage::set_has_endconnection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseMessage::clear_has_endconnection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseMessage::clear_endconnection() {
  endconnection_ = false;
  clear_has_endconnection();
}
inline bool BaseMessage::endconnection() const {
  return endconnection_;
}
inline void BaseMessage::set_endconnection(bool value) {
  set_has_endconnection();
  endconnection_ = value;
}

// -------------------------------------------------------------------

// Register

// repeated .batchtank_messages.Sensor type = 1;
inline int Register::type_size() const {
  return type_.size();
}
inline void Register::clear_type() {
  type_.Clear();
}
inline batchtank_messages::Sensor Register::type(int index) const {
  return static_cast< batchtank_messages::Sensor >(type_.Get(index));
}
inline void Register::set_type(int index, batchtank_messages::Sensor value) {
  GOOGLE_DCHECK(batchtank_messages::Sensor_IsValid(value));
  type_.Set(index, value);
}
inline void Register::add_type(batchtank_messages::Sensor value) {
  GOOGLE_DCHECK(batchtank_messages::Sensor_IsValid(value));
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Register::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
Register::mutable_type() {
  return &type_;
}

// required uint64 periodTime = 2;
inline bool Register::has_periodtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_periodtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_periodtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_periodtime() {
  periodtime_ = GOOGLE_ULONGLONG(0);
  clear_has_periodtime();
}
inline ::google::protobuf::uint64 Register::periodtime() const {
  return periodtime_;
}
inline void Register::set_periodtime(::google::protobuf::uint64 value) {
  set_has_periodtime();
  periodtime_ = value;
}

// -------------------------------------------------------------------

// ControlSignal

// required int32 value = 1;
inline bool ControlSignal::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlSignal::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlSignal::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlSignal::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ControlSignal::value() const {
  return value_;
}
inline void ControlSignal::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required int32 ref = 2;
inline bool ControlSignal::has_ref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlSignal::set_has_ref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlSignal::clear_has_ref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlSignal::clear_ref() {
  ref_ = 0;
  clear_has_ref();
}
inline ::google::protobuf::int32 ControlSignal::ref() const {
  return ref_;
}
inline void ControlSignal::set_ref(::google::protobuf::int32 value) {
  set_has_ref();
  ref_ = value;
}

// required .batchtank_messages.Output type = 3;
inline bool ControlSignal::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlSignal::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlSignal::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlSignal::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline batchtank_messages::Output ControlSignal::type() const {
  return static_cast< batchtank_messages::Output >(type_);
}
inline void ControlSignal::set_type(batchtank_messages::Output value) {
  GOOGLE_DCHECK(batchtank_messages::Output_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Sample

// required int32 value = 1;
inline bool Sample::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sample::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sample::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sample::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Sample::value() const {
  return value_;
}
inline void Sample::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required .batchtank_messages.Sensor type = 2;
inline bool Sample::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sample::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sample::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sample::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline batchtank_messages::Sensor Sample::type() const {
  return static_cast< batchtank_messages::Sensor >(type_);
}
inline void Sample::set_type(batchtank_messages::Sensor value) {
  GOOGLE_DCHECK(batchtank_messages::Sensor_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace batchtank_messages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_batchtank_2eproto__INCLUDED
